pipeline {
    agent {label 'master'}
    tools {
        gradle "Default"
    }

    options {
        buildDiscarder logRotator( 
                    daysToKeepStr: '15', 
                    numToKeepStr: '10'
            )
    }

    environment {
        APP_NAME = "DEMO_APP"
        envMode = getEnvMode() //optional
    }

    stages {
        stage('Cleanup Workspace') {
            steps {
                cleanWs()
                sh """
                echo "Cleaned Up Workspace for ${APP_NAME}"
                """
            }
        }
        stage('Code Checkout') {
            steps {
                // sh 'pwd'
                // sh 'echo star-pipeline!!!!'
                // git branch: 'main', url: 'https://github.com/muntashir-islam/cicd-GitOps-Jenkins-Argocd.git'
                // sh 'pwd'
                // sh 'ls'
                checkout([
                    $class: 'GitSCM', 
                    branches: [[name: '*/main']], 
                    userRemoteConfigs: [[url: 'https://github.com/muntashir-islam/cicd-GitOps-Jenkins-Argocd.git']]
                ])
            }
        }

        stage('Build and release demo project') {
            steps {
                milestone(1)
                 sh 'cd cicd-GitOps-Jenkins-Argocd/springboot-demo-app && gradle build'
            }
        }

        stage('Test demo'){
            steps{
                sh 'cd cicd-GitOps-Jenkins-Argocd/springboot-demo-app && gradle test'
            }
            
        } 
        //One way of build and pushing image into docker hub
        // stage('Build and Push Docker Image') {
        //     environment {
        //         DOCKER_IMAGE = "muntashir/demo:${env.GIT_COMMIT}" 
        //         DOCKERFILE_LOCATION = "cicd-GitOps-Jenkins-Argocd/springboot-demo-app/Dockerfile"
        //         REGISTRY_CREDENTIALS = credentials('docker-cred')
        //     }
        //     steps {
        //         script {
        //             sh 'cd cicd-GitOps-Jenkins-Argocd/springboot-demo-app && docker build -t ${DOCKER_IMAGE} .'
        //             def dockerImage = docker.image("${DOCKER_IMAGE}")
        //             docker.withRegistry('https://registry-1.docker.io', "docker_hub_login") {
        //                 dockerImage.push()
        //             }
        //         }
        //     }
        // }
        
          
        stage("Build Docker File") {
            steps {
                script {
                    sh 'cd cicd-GitOps-Jenkins-Argocd/springboot-demo-app'
                    demo = docker.build("muntashir/demo", "--no-cache .",)
                }
            }
        }

        stage('Push Docker Image test deploy') {
            steps {
                script {
                    docker.withRegistry('https://registry-1.docker.io', 'docker_hub_login') {
                        demo.push("${env.GIT_COMMIT}")
                      }
                }
            }
        }

        stage('Deploy Test') {
            steps {

                sh "rm -rf gitops-*"
                sh "git clone git@github.com:muntashir-islam/cicd-GitOps-Jenkins-Argocd.git"
                sh "git config --global user.email 'ci@ci.com'"
                dir("gitops-demo") {
                    sh "cd ./gitops-demo/overlays/test && kustomize edit set image muntashir/demo:${env.GIT_COMMIT}"
                    sh "git commit -am 'Publish new version' && git push || echo 'no changes'"
                    deleteDir()
                }
                sh "rm -rf gitops-*"
                
            }
        }
       

        stage("Approval for Production") {
            steps {
                script { 
                    try {
                        timeout(time: 15, unit: "SECONDS"){
                         userInput = input(id: 'Proceed1', message: 'Promote build?', parameters: [[$class: 'BooleanParameterDefinition', defaultValue: true, description: '', name: 'Please confirm you agree to deploy in production']])
                         echo 'userInput: ' + userInput
                        }
                        sleep(time: 5, unit: "SECONDS")
                       currentBuild.result = "SUCCESS" 
                    } catch (Throwable e) {
                        echo "Caught ${e.toString()}"
                        currentBuild.result = "SUCCESS" 
                    }
                }
            }
        }
        

        stage('Deploy to Prod') {
            when {
                branch 'main'
            }
            steps {
                script{
                    if(userInput){
                        sh "rm -rf gitops-demo" 
                        // sh "git clone https://user:token@github.com/hishabdevs/gitops-demo.git"
                        sh "git clone git@github.com:muntashir-islam/cicd-GitOps-Jenkins-Argocd.git"
                        sh "git config --global user.email 'ci@ci.com'"
                        dir("gitops-demo") {
                            sh "cd ./gitops-demo/overlays/prod && kustomize edit set image  muntashir/demo:${env.GIT_COMMIT}"
                            sh "git commit -am 'Publish new version' && git push || echo 'no changes'"
                        }
                        deleteDir()
                    }
                    
                        currentBuild.result = "SUCCESS"

                }
            }
        }
    
    }
    post {
            success {
            slackSend channel: '#jenkins-ci',
                  color: 'good',
                  message: "The pipeline ${currentBuild.fullDisplayName} completed successfully."
            }
        }
}   

def getEnvMode(){
    if(env.BRANCH_NAME == 'development'){
        return "develop";
    } else if(env.BRANCH_NAME == 'main'){
        return "production";
    } 
}